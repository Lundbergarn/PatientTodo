{"version":3,"sources":["Components/NameModal.js","Components/TodosModal.js","Components/Todo.js","Components/Patient.js","Components/PatientList.js","App.js","serviceWorker.js","index.js"],"names":["ItemModal","props","useState","patient","setpatient","modal","setModal","toggle","Button","color","style","marginBottom","height","onClick","title","Modal","isOpen","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","addPatient","FormGroup","Label","for","Input","type","name","id","value","placeholder","onChange","target","marginTop","block","TodosModal","extra","setExtra","list","width","obj","todos","keys","i","length","push","checked","includes","todo","status","addTodos","map","key","className","Todo","handleTodo","Card","flexBasis","margin","padding","variant","Patient","addTodosState","setTodos","updateTodo","updatedStatus","Container","position","input","selectedTodos","property","activities","sort","a","b","renderTodos","PatientList","patientView","setPatientView","setPatient","setList","togglePatientView","useEffect","patients","localStorage","getItem","JSON","parse","update","el","notDone","forEach","setItem","stringify","NameModal","uuid","items","minWidth","Body","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcb7e6c4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from 'reactstrap';\r\n\r\n\r\nconst ItemModal = (props) => {\r\n  const [patient, setpatient] = useState('');\r\n  const [modal, setModal] = useState(false);\r\n\r\n  function toggle() {\r\n    setModal(!modal);\r\n  }\r\n\r\n  function onChange(e) {\r\n    setpatient(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    props.addPatient(patient);\r\n    toggle();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        color=\"info\"\r\n        style={{ marginBottom: '2rem', height: '50px' }}\r\n        onClick={toggle}\r\n      >{props.title}</Button>\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n      >\r\n        <ModalHeader toggle={toggle}>{props.title}</ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n              <Label for=\"patient\">Patient</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"patient\"\r\n                value={patient}\r\n                placeholder={props.title}\r\n                onChange={onChange}\r\n              ></Input>\r\n              <Button\r\n                color=\"info\"\r\n                style={{ marginTop: '2rem' }}\r\n                block\r\n              >{props.title}</Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ItemModal;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from 'reactstrap';\r\n\r\n\r\nconst TodosModal = (props) => {\r\n  const [extra, setExtra] = useState('');\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const list = [\r\n    'Journal',\r\n    'Recept',\r\n    'Remiss',\r\n    'Provsvar',\r\n    'Ring hem',\r\n    'Hemgångsråd',\r\n    'Debitera',\r\n    'Åtgärd'\r\n  ];\r\n\r\n  function toggle() {\r\n    setModal(!modal);\r\n  }\r\n\r\n  function handleExtra(e) {\r\n    setExtra(e.target.value);\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    let obj = { ...props.todos };\r\n    e.preventDefault();\r\n\r\n    let keys = [];\r\n    for (let i = 0; i < props.todos.length; i++) {\r\n      keys.push(props.todos[i].name)\r\n    }\r\n\r\n    // Loop list with inputs\r\n    let i = 0;\r\n    for (i; i < list.length; i++) {\r\n      if (e.target[i].checked) {\r\n        if (!keys.includes(e.target[i].id)) {\r\n          obj[e.target[i].id] = { name: e.target[i].id, todo: e.target[i].checked, status: 'red' };\r\n        }\r\n      }\r\n    }\r\n    // Add extra input\r\n    if (extra) {\r\n      obj[extra] = { name: extra, todo: true, status: 'red' };\r\n    }\r\n    props.addTodos(obj);\r\n    setExtra('');\r\n    toggle();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        color=\"info\"\r\n        style={{ marginBottom: '2rem', height: '50px', width: '215px' }}\r\n        onClick={toggle}\r\n      >{props.title}</Button>\r\n\r\n      <Modal\r\n        isOpen={modal}\r\n        toggle={toggle}\r\n      >\r\n        <ModalHeader toggle={toggle}>{props.title}</ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={onSubmit}>\r\n            <FormGroup>\r\n\r\n              {list.map(name => {\r\n                let keys = [];\r\n                for (let i = 0; i < props.todos.length; i++) {\r\n                  keys.push(props.todos[i].name)\r\n                }\r\n                if (keys.includes(name)) {\r\n                  return (\r\n                    <div key={name} className=\"form__todo\">\r\n                      <Label className=\"form__todo_label\" for=\"todos\">{name}</Label>\r\n                      <Input\r\n                        className=\"form__todo_input\"\r\n                        type=\"checkbox\"\r\n                        checked=\"defaultChecked\"\r\n                        id={name}\r\n                      >\r\n                      </Input>\r\n                    </div>\r\n                  )\r\n                } else {\r\n                  return (\r\n                    <div key={name} className=\"form__todo\">\r\n                      <Label className=\"form__todo_label\" for=\"todos\">{name}</Label>\r\n                      <Input\r\n                        className=\"form__todo_input\"\r\n                        type=\"checkbox\"\r\n                        id={name}\r\n                      >\r\n                      </Input>\r\n                    </div>\r\n                  )\r\n                }\r\n              }\r\n              )}\r\n\r\n              <Label style={{ marginTop: '20px' }} for=\"todos\">Övrigt</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                id=\"todos\"\r\n                placeholder=\"Extra\"\r\n                value={extra}\r\n                onChange={handleExtra}\r\n              ></Input>\r\n              <Button\r\n                color=\"info\"\r\n                style={{ marginTop: '2rem' }}\r\n                block\r\n              >{props.title}</Button>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodosModal;\r\n","import React from 'react';\r\nimport { Card, Button } from 'react-bootstrap';\r\nimport './todo.css';\r\n\r\nfunction Todo({ status, handleTodo, name }) {\r\n  return (\r\n    <Card style={{ flexBasis: '1', margin: '1rem' }}>\r\n      <Button\r\n        style={{ padding: '10px 0' }}\r\n        className={status}\r\n        onClick={(e) => handleTodo(status, name)}\r\n        variant=\"primary\"\r\n      >{name}</Button>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from 'react';\r\nimport TodosModal from './TodosModal';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container } from 'react-bootstrap';\r\nimport Todo from './Todo';\r\n\r\nfunction Patient({ patient, addTodosState }) {\r\n  const [todos, setTodos] = useState([...patient.todos]);\r\n\r\n  // Change todo status\r\n  function handleTodo(status, name) {\r\n    switch (status) {\r\n      case 'red':\r\n        setTodos(updateTodo('yellow', name))\r\n        break;\r\n      case 'yellow':\r\n        setTodos(updateTodo('green', name))\r\n        break;\r\n      default:\r\n        setTodos(updateTodo('red', name))\r\n    }\r\n  }\r\n\r\n\r\n  // Add todos to list\r\n  function addTodos(input) {\r\n    if (input) {\r\n      let selectedTodos = [];\r\n      for (var property in input) {\r\n        if (input[property].todo === true) {\r\n          selectedTodos.push(input[property])\r\n        }\r\n      }\r\n      setTodos(selectedTodos);\r\n      // Update to main state\r\n      addTodosState(selectedTodos, patient.id)\r\n    }\r\n  }\r\n\r\n  // Update todolist\r\n  function updateTodo(status, name) {\r\n    const updatedStatus = todos.map(todo => {\r\n      if (todo.name === name) {\r\n        todo.status = status;\r\n      }\r\n      return todo;\r\n    })\r\n    // Update to main state\r\n    addTodosState(updatedStatus, patient.id);\r\n    return updatedStatus;\r\n  }\r\n\r\n  function renderTodos(todos) {\r\n    if (todos) {\r\n      todos = todos.sort((a, b) => {\r\n        if (a.status === 'green' && b.status === 'red') return 1;\r\n        else if (a.status === 'green' && b.status === 'green') return 0;\r\n        else if (a.status === 'yellow' && b.status === 'yellow') return 0;\r\n        else if (a.status === 'red' && b.status === 'red') return 0;\r\n        else if (a.status === 'green' && b.status === 'yellow') return 1;\r\n        else if (a.status === 'yellow' && b.status === 'green') return -1;\r\n        else if (a.status === 'red' && b.status === 'yellow') return -1;\r\n        else if (a.status === 'yellow' && b.status === 'red') return 1;\r\n        else return -1;\r\n      });\r\n      return (\r\n        todos.map(\r\n          todo => (\r\n            <Todo\r\n              key={todo.name}\r\n              name={todo.name}\r\n              status={todo.status}\r\n              handleTodo={handleTodo}\r\n            />\r\n          )\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container style={{ marginTop: '30px', position: 'relative' }}>\r\n        <TodosModal\r\n          title=\"Lägg till todo\"\r\n          todos={todos}\r\n          addTodos={addTodos}\r\n        />\r\n        {patient.activities > 0 ?\r\n          <h2 style={{ color: 'rgb(143, 19, 19)' }}>{patient.title} - {patient.activities}</h2>\r\n          : <h2>{patient.title} - {patient.activities}</h2>\r\n        }\r\n\r\n        {renderTodos(todos)}\r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Patient;\r\n","import React, { useState, useEffect } from 'react';\r\nimport NameModal from './NameModal';\r\nimport Patient from './Patient';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Card, Button } from 'react-bootstrap';\r\nimport uuid from 'uuid';\r\nimport './patientList.css';\r\n\r\nfunction PatientList() {\r\n  const [patientView, setPatientView] = useState(false);\r\n  const [patient, setPatient] = useState({});\r\n  const [list, setList] = useState([]);\r\n  // const [list, setList] = useState([\r\n  //   { id: uuid(), title: 'Pelle', activities: 0, todos: [] },\r\n  //   { id: uuid(), title: 'Bamse', activities: 0, todos: [] },\r\n  //   { id: uuid(), title: 'Morran', activities: 0, todos: [] },\r\n  //   { id: uuid(), title: 'Murre', activities: 0, todos: [] },\r\n  //   { id: uuid(), title: 'Gustav', activities: 0, todos: [] },\r\n  //   { id: uuid(), title: 'Lyssa', activities: 0, todos: [] }\r\n  // ]);\r\n\r\n  useEffect(() => {\r\n    const patients = localStorage.getItem('patientsList');\r\n    if (patients) {\r\n      setList(JSON.parse(patients));\r\n    } else {\r\n      setList([]);\r\n    }\r\n  }, []);\r\n\r\n  // Add new patient\r\n  function addPatient(title) {\r\n    if (title) {\r\n      let input = { id: uuid(), title, activities: 0, todos: [] };\r\n      setList(items => [...items, input]);\r\n      localStorage.setItem('patientsList', JSON.stringify([...list, input]));\r\n      // setList(items => [...items, { id: uuid(), title, activities: 0, todos: [] }]);\r\n    }\r\n  }\r\n\r\n\r\n  // Switch to patient view\r\n  function togglePatientView() {\r\n    setPatientView(!patientView);\r\n  }\r\n\r\n  function toPatientHandle(el) {\r\n    togglePatientView();\r\n    setPatient(el)\r\n  }\r\n\r\n  function addTodosState(input, id) {\r\n    const update = list.map(el => {\r\n      if (el.id === id) {\r\n        let notDone = 0;\r\n        input.forEach(el => {\r\n          if (el.status !== 'green') {\r\n            notDone++;\r\n          }\r\n        })\r\n        el.activities = notDone;\r\n        el.todos = input;\r\n      }\r\n      return el;\r\n    })\r\n    localStorage.setItem('patientsList', JSON.stringify(update));\r\n    setList(update);\r\n  }\r\n\r\n  return (\r\n    !patientView ?\r\n      (\r\n        <div>\r\n          <Container>\r\n            <NameModal\r\n              title=\"Lägg till patient\"\r\n              addPatient={addPatient}\r\n            />\r\n            <div className=\"patient__list\">\r\n              {\r\n                list.sort((a, b) => b.activities - a.activities).map(patient => {\r\n                  return (\r\n                    <Card key={patient.id} style={{ minWidth: '25%', flexBasis: '1', margin: '1rem' }}>\r\n                      <Card.Body>\r\n                        {patient.activities > 0 ?\r\n                          <Card.Title style={{ color: 'red' }}>{patient.title} - {patient.activities}</Card.Title>\r\n                          :\r\n                          <Card.Title>{patient.title} - {patient.activities}</Card.Title>\r\n                        }\r\n                        {/* <Card.Text>Some quick example text.</Card.Text> */}\r\n                        <Button\r\n                          onClick={() => toPatientHandle(patient)}\r\n                          variant=\"info\"\r\n                        >Till patient\r\n                      </Button>\r\n                      </Card.Body>\r\n                    </Card>\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n          </Container>\r\n        </div>\r\n      ) :\r\n      (\r\n        <div>\r\n          <Button\r\n            style={{ height: '50px', width: '215px' }}\r\n            variant=\"info\"\r\n            onClick={() => togglePatientView()}\r\n          >\r\n            Tillbaka till översikt\r\n        </Button>\r\n          <Patient\r\n            addTodosState={addTodosState}\r\n            patient={patient}\r\n          />\r\n        </div>\r\n      )\r\n  );\r\n}\r\n\r\nexport default PatientList;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport PatientList from './Components/PatientList';\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <PatientList/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}